{"name":"Raspberry PI","tagline":"","body":"## Create SD card on Mac\r\n\r\n```shell\r\ndiskutil list\r\ndiskutil unmountDisk /dev/disk#\r\nsudo dd bs=1m if=2013-07-26-wheezy-raspbian.img of=/dev/disk#\r\n```\r\n\r\n## Create SD card on Ubuntu\r\n```shell\r\nsudo fdisk -l\r\nsudo dd if=/home/2012-10-28-wheezy-raspbian.img of=/dev/sdb\r\n```\r\n\r\n## Static IP\r\n```shell\r\nvi /etc/network/interfaces\r\n```\r\nreplace entire text with the following\r\n\r\n```shell\r\niface eth0 inet static\r\naddress 192.168.1.99\r\nnetmask 255.255.255.0\r\ngateway 192.168.1.1\r\ndns-nameservers 192.168.1.1`\r\n```\r\n## Transmission\r\n```shell\r\nsudo apt-get install transmission transmission-daemon transmission-cli\r\nsudo service transmission-daemon stop\r\nsudo vi /etc/transmission-daemon/settings.json\r\n```\r\nChange following properties in settings.json\r\n```json\r\n\"download-dir\": \"/media/locker/torrents\",\r\n\"rpc-authentication-required\": true,\r\n\"rpc-password\": \"YourPassword_in_english\",\r\n\"rpc-username\": \"YourPrefferedUserName\",\r\n\"rpc-bind-address\": \"0.0.0.0\",\r\n\"rpc-whitelist\": \"*.*.*.*\",\r\n```\r\n```shell\r\nsudo service transmission-daemon start\r\n```\r\n## ownCloud\r\n```shell\r\nsudo apt-get update && apt-get upgrade\r\nsudo apt-get install -y git dialog\r\nsudo apt-get install -y nginx php5 php5-curl php5-cgi php5-fpm php5-gd php5-mysql mysql-server\r\n```\r\n```shell\r\ngit clone git://github.com/petrockblog/OwncloudPie.git\r\ncd OwncloudPie/\r\n./owncloudpie_setup.sh \r\n```\r\nSelect 1st option enter IP address of raspberry pi then select 2nd option.\r\n\r\n## Install minildna\r\n```shell\r\nsudo apt-get install minidlna\r\nsudo vi /etc/minidlna.conf\r\n```\r\nAdd following line, Make sure that your folders are owned by minidlna\r\n```properties\r\nmedia_dir=P,/media/locker/Photos\r\nroot_container=P\r\nsudo service minidlna force-reload\r\n```\r\n\r\nUse a different container as the root of the tree exposed to clients. The possible values are:\r\n\r\n``` shell\r\n. to use the standard container (this is the default);\r\nB to use the “Browse Directory” container;\r\nM to use the “Music” container;\r\nV to use the “Video” container;\r\nP to use the “Pictures” container.\r\n```\r\n## Install VPN\r\n```shell\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\nsudo modprobe ppp-compress-18\r\n```\r\nAbove command should not display any error\r\n```shell\r\nsudo apt-get install pptpd\r\nsudo vi /etc/pptpd.conf\r\n```\r\nAt the end of the file, uncomment the following lines\r\n```shell\r\nlocalip 192.168.1.99\r\nremoteip 192.168.1.50-238,192.168.1.255\r\n```\r\nAnd change the \"localip\" to your raspberry pi ip address\r\nRemoteip = are the addresses that will be handed out to clients.\r\n```shell\r\nsudo vi /etc/ppp/pptpd-options\r\n```\r\nAdd the following text at the bottom:\r\n```shell\r\nms-dns 192.168.1.1\r\nnoipx\r\nmtu 1490\r\nmru 1490\r\n```\r\nWhere the IP used for the ms-dns directive is the IP address of your router.\r\n```shell\r\nsudo vi /etc/ppp/chap-secrets\r\n```\r\nThis is where you will place your credentials for logging into the VPN server add your authentication credentials in the following form:\r\n```shell\r\nusername[TAB]*[TAB]password[TAB]*\r\nsudo service pptpd restart\r\nsudo vi /etc/sysctl.conf\r\n```\r\nEnable forwarding if you wish to have access to your entire home network while away.\r\nFind `net.ipv4.ip_forward=1` and uncomment it (or change =0 to =1) \r\n```shell\r\nsudo sysctl -p\r\n```\r\n\r\n##Install Java\r\ndownload java from oracle the following link and move to raspberry pi\r\nhttp://www.oracle.com/technetwork/java/javase/downloads/jdk8-arm-downloads-2187472.html\r\n\r\n```shell\r\nsudo tar zxvf jdk-8-linux-arm-vfp-hflt.tar.gz -C /opt\r\n```\r\n\r\nSet default java and javac to the new installed jdk8.\r\n\r\n```shell\r\nsudo update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.X/bin/javac 1\r\nsudo update-alternatives --install /usr/bin/java java /opt/jdk1.8.X/bin/java 1\r\nsudo update-alternatives --config javac\r\nsudo update-alternatives --config java\r\n```\r\n\r\nAfter all, verify with the commands with -version option.\r\n\r\n```shell\r\njava -version\r\njavac -version\r\n```\r\n## Add Apple OS X HFS+ read/write support\r\n```shell\r\nsudo apt-get install hfsutils hfsprogs hfsutils\r\n```\r\n## Add NTFS rw support\r\n```shell\r\nsudo apt-get install ntfs-3g\r\nsudo mount /dev/sda1 /mnt/usbdrive\r\n```\r\n\r\n## Mount External Drive\r\n```shell\r\nsudo vi /etc/fstab\r\n```\r\nAdd following line as per your drive and mount point\r\n\r\n```shell\r\n/dev/sda1\t/media/locker\text4\tdefaults,noatime\t0\t1\r\nsudo reboot\r\n```\r\n\r\n## Apple TimeMachine\r\n```shell\r\nsudo apt-get install netatalk\r\nmkdir /media/Locker/TimeMachine\r\nsudo echo \"/media/locker/TimeMachine \\\"Time Machine\\\" options:tm\" >> /etc/netatalk/AppleVolumes.default\r\nsudo service netatalk restart\r\n```\r\nOpen TimeMachine on Mac, you should see a shared drive.\r\n\r\n## RetroPie-Setup\r\nhttps://github.com/petrockblog/RetroPie-Setup\r\n\r\n## Install VNC server\r\n```shell\r\nsudo apt-get install xorg lxde-core lxde-icon-theme tightvncserver\r\nsudo vi /etc/init.d/vncboot\r\n```\r\nPaste following text\r\n\r\n```shell\r\n### BEGIN INIT INFO\r\n# Provides: vncboot\r\n# Required-Start: $remote_fs $syslog\r\n# Required-Stop: $remote_fs $syslog\r\n# Default-Start: 2 3 4 5\r\n# Default-Stop: 0 1 6\r\n# Short-Description: Start VNC Server at boot time\r\n# Description: Start VNC Server at boot time.\r\n### END INIT INFO\r\n#! /bin/sh\r\n# /etc/init.d/vncboot\r\nUSER=xbian\r\nHOME=/home/xbian\r\nexport USER HOME\r\ncase \"$1\" in\r\nstart)\r\n  echo \"Starting VNC Server\"\r\n  #Insert your favoured settings for a VNC session\r\n  su - $USER -c “/usr/bin/vncserver :1 -geometry 1024x768 -depth 24 -dpi 90”\r\n  su - $USER -c “/usr/bin/vncserver :2 -geometry 1136x640 -depth 24 -dpi 90”\r\n;;\r\nstop)\r\n  echo \"Stopping VNC Server\"\r\n  /usr/bin/vncserver -kill :0\r\n;;\r\n*)\r\n  echo \"Usage: /etc/init.d/vncboot {start|stop}\"\r\n  exit 1\r\n;;\r\nesac\r\nexit 0\r\n```\r\n```shell\r\nsudo chmod +x /etc/init.d/vncboot \r\nsudo update-rc.d vncboot defaults\r\nsudo /etc/init.d/vncboot start\r\nsudo reboot\r\n```\r\n\r\n## NFS (Network File System)\r\n```shell\r\nsudo apt-get install nfs-kernel-server\r\nsudo vi /etc/exports\r\n/media/locker/nfs 192.168.1.0/255(rw,sync,no_subtree_check)\r\nsudo service rpcbind start\r\nsudo vi /etc/netconfig\r\n```\r\nComment out\r\n```shell\r\n#udp6       tpi_clts      v     inet6    udp     -       -\r\n#tcp6       tpi_cots_ord  v     inet6    tcp     -       -\r\n```\r\n## On Mac OS X\r\n```shell\r\nsudo mount_nfs -o resvport pi:/media/locker/nfs /Volumes/NFS/\r\n```\r\n\r\n## MP4 to MKV\r\n```shell\r\navconv -i input.mkv -c copy output.m4v\r\n```\r\n\r\n## Disk Operations\r\n### Mount a USB drive\r\n```shell\r\nsudo mount /dev/sda1 /mnt/usbdrive\r\n```\r\n### List your file systems\r\n```shell\r\nsudo fdisk -l\r\nsudo mount -l\r\ndf -h\r\n```\r\n### Unmount a USB drive\r\n```shell\r\nsudo umount /dev/sda1\r\n```\r\nYou may need to use the -f force option if the drive will not dismount.\r\n```shell\r\nsudo umount -f /dev/sda1\r\n```\r\n### Format a drive\r\nFirst you must unmount the drive you wish to format.\r\n#### Format a drive to EXT4\r\n```shell\r\nsudo mkfs.ext4 /dev/sda1 -L untitled\r\n```\r\n#### Format a drive to HFS+\r\n```shell\r\nsudo mkfs.hfsplus /dev/sda1 -v untitled\r\n```\r\n#### Format a drive to NTFS\r\n```shell\r\nsudo mkfs.ntfs /dev/sda1 -f -v -I -L untitled\r\n\r\n-f Fast Format. Due to the poor performance of 3g.ntfs on the Pi I highly recommend using the less CPU intensive fast format mode.\r\n-v Verbose. By default the NTFS status output is limited so this lets you know what is happening.\r\n-I Disable Windows Indexing. This improves the write performance of the drive but it will mean Windows Search queries used on this drive will take longer.\r\n```\r\n\r\n#### Add Windows/DOS FAT32 read/write support\r\n```shell\r\nsudo apt-get install dosfstools\r\n```\r\n#### Format a drive to FAT32\r\n```shell\r\nsudo mkfs.vfat /dev/sda1 -n untitled\r\n```\r\n\r\n#### Automatically Mount A Drive\r\n```shell\r\nsudo vi /etc/fstab\r\n```\r\nAdd the following to the bottom of the file.\r\n```shell\r\n/dev/sda1 /mnt/usbdisk auto defaults,user 0 1\r\n/dev/sda1 is the location of the drive to mount.\r\n/mnt/usbdisk is the mount point, which is the folder to access the content of the drive.\r\n\r\n#auto Is the file system type, here you can set ‘auto‘ or force a file system type such as ext2, ext3, ext4, hfsplus, ntfs, vfat.\r\n#defaults,user Are mount options. You normally need to only supply ‘defaults‘. Though there are some others that may be useful such as ‘ro‘ for read-only or ‘user‘ to enable write permission for all users. Use a non-spaced comma to separate multiple options.\r\n# 0 A binary value used for debugging. It is best to keep this set at zero.\r\n# 1 Pass number for a filesystem check at boot. ‘0‘ (zero) to disable or ‘2‘ to enable.\r\n```\r\n","google":"UA-66512266-1","note":"Don't delete this file! It's used internally to help with page regeneration."}